import java.io.ByteArrayInputStream;
import java.io.ByteArrayOutputStream;
import java.io.IOException;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;
import java.net.DatagramPacket;
import java.net.DatagramSocket;
import java.net.InetAddress;
import java.net.SocketException;
import java.net.UnknownHostException;
import java.util.HashSet;
import java.util.Map;
import java.util.Set;



public class tRtxServer implements Runnable{
	Map<String, Boolean> ackMessages;
	Set<String> messages;
	public tRtxServer( ) {
		messages  = new HashSet<String>();
	}
	public void run() {
		// TODO Auto-generated method stub
		
	}
	public void liste (){
		DatagramSocket socket;
		try {
			socket = new DatagramSocket(8888);
			socket.setBroadcast(true);
	        byte[] mensajeRecibido = new byte[15000];
	        DatagramPacket paqueteRecibido=new DatagramPacket(mensajeRecibido, mensajeRecibido.length);

	        socket.receive(paqueteRecibido);
	        ByteArrayInputStream bs = new ByteArrayInputStream(paqueteRecibido.getData());
	        ObjectInputStream is = new ObjectInputStream (bs);
	        Object o = (Message) is.readObject();
	        is.close();
	        socket.close();
	        
	        if (o instanceof Message){
	        	Message m = (Message) o;
	        	if (!m.getIP().equals(InetAddress.getLocalHost().getHostAddress()) && !messages.contains(m.getID())){
	        		messages.add(m.getID());
	        		tx(m);
	        	}
	        }
	        
		} catch (SocketException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		} catch (IOException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		} catch (ClassNotFoundException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
        
	}
	private void tx(Message m) {
		try {
			DatagramSocket socket =new DatagramSocket();
						
			ByteArrayOutputStream bs = new ByteArrayOutputStream();
			ObjectOutputStream os = new ObjectOutputStream(bs);
			os.writeObject(m);
			byte[] mensajeEnviar = bs.toByteArray();
            
			DatagramPacket paqueteEnviar= new DatagramPacket(mensajeEnviar, mensajeEnviar.length,InetAddress.getByName("192.168.173.255"),8888);
            System.out.println("Reenviando: "+m.getID());
            
            socket.send(paqueteEnviar);
            socket.close();
                  
		} catch (SocketException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		} catch (UnknownHostException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		} catch (IOException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
	}
	
	

}
